const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const admin = require('firebase-admin');
const bcrypt = require('bcryptjs');
const dotenv = require('dotenv');

dotenv.config();

// Generate JWT Token
const generateToken = (user) => {
  return jwt.sign(
    { uid: user.uid, email: user.email, role: user.role || 'user' },
    process.env.JWT_SECRET,
    { expiresIn: '7d' }
  );
};

// **REGISTER USER**
router.post('/register', async (req, res) => {
  try {
    const { email, password, name } = req.body;
    if (!email || !password || !name) {
      return res.status(400).json({ error: 'Email, password, and name are required.' });
    }

    // Hash password before storing (extra security)
    const salt = await bcrypt.genSalt(12);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Create user in Firebase Auth
    const userRecord = await admin.auth().createUser({
      email,
      password,
      displayName: name,
    });

    // Store user details in Firestore
    await admin.firestore().collection('users').doc(userRecord.uid).set({
      email,
      name,
      password: hashedPassword, // Secure storage
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
    });

    const token = generateToken(userRecord);
    res.status(201).json({ token, message: 'Registration successful.', user: { uid: 
userRecord.uid, email, name } });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// **LOGIN USER**
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ error: 'Email and password are required.' });
    }

    // Get user from Firebase Auth
    const userRecord = await admin.auth().getUserByEmail(email);

    // Get user data from Firestore
    const userDoc = await admin.firestore().collection('users').doc(userRecord.uid).get();
    const userData = userDoc.data();

    // Verify Password
    const isValidPassword = await bcrypt.compare(password, userData.password);
    if (!isValidPassword) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    const token = generateToken(userRecord);
    res.json({ token, user: { uid: userRecord.uid, email: userRecord.email, name: 
userRecord.displayName } });
  } catch (error) {
    res.status(401).json({ error: 'Invalid credentials' });
  }
});

// **VERIFY JWT TOKEN**
router.get('/verify', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader) {
      return res.status(403).json({ error: 'No token provided' });
    }

    const token = authHeader.split(' ')[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    res.json({ message: 'Token is valid', decoded });
  } catch (error) {
    res.status(401).json({ error: 'Invalid token' });
  }
});

module.exports = router;

