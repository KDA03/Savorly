const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const morgan = require('morgan');
const jwt = require('jsonwebtoken');
const dotenv = require('dotenv');
const admin = require('firebase-admin');
const path = require('path');

dotenv.config();

const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

const serviceAccountPath = path.join(__dirname, 'serviceAccountKey.json');
const serviceAccount = require(serviceAccountPath);

if (!admin.apps.length) {
    admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
        projectId: "chewsr-11667"
    });

const db = admin.firestore();

const app = express();
const PORT = process.env.PORT || 5000;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(helmet());
app.use(morgan('combined'));

const corsOptions = {
    origin: process.env.CLIENT_URL || 'http://localhost:3000',
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    maxAge: 86400
};
app.use(cors(corsOptions));

const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100,
    message: 'Too many requests from this IP, please try again later.'
});
app.use('/api/', limiter);

const verifyToken = (req, res, next) => {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return res.status(401).json({ error: "Unauthorized" });
    }
    const token = authHeader.split(" ")[1];

    jwt.verify(token, JWT_SECRET, (err, decoded) => {
        if (err) {
            return res.status(403).json({ error: "Invalid token" });
        }
        req.user = decoded;
        next();
    });
};

const authRoutes = require('./src/routes/auth');
const profileRoutes = require('./src/routes/profile');
const swipeRoutes = require('./src/routes/swipes');
const mealsRoutes = require('./src/routes/meals');
const achievementRoutes = require('./src/routes/achievements');

app.use('/api/auth', authRoutes);
app.use('/api/profile', verifyToken, profileRoutes);
app.use('/api/swipes', verifyToken, swipeRoutes);
app.use('/api/meals', verifyToken, mealsRoutes);
app.use('/api/achievements', verifyToken, achievementRoutes);

app.listen(PORT, () => {
    console.log(`âœ… Server running on port ${PORT}`);
});

module.exports = { db, admin, app };
